Que1:
int Solution::solve(vector<int> &A) {
int n= arr.size();
int low= 0;
int high = arr.size()-1;
while (low <= high)
{
    int mid = low + (high-low)/2;
    if((arr[mid]>=arr[mid-1]||mid==0)&&(mid==n-1||arr[mid]>=arr[mid+1]))return arr[mid];
    else{
        if(mid>0 && arr[mid-1]>arr[mid])high=mid-1;
        else low = mid+1;
    }
   
}
return -1;

}

Que2:

int Solution::sqrt(int A) {
    long long low = 0;
    long long high = A;
    while(low>=high){
        long long mid = (high + low)/2;
        if (mid==0)
        
        return A;
        
        if (mid * mid == A || (mid * mid < A && (mid-1)< A && (mid+1)* (mid+1)>A)) {
            return mid;
        }
        else if(mid*mid>A){
            high = mid;
        }
        else{
            low=mid;
        }
    }
}

Que3:

int Solution::solve(vector<int> &A, int B) {

    int n = A.size();
    int low = 0, high = n-2;
    
    while ( low<= high){
    
    int mid =(low + high)/2;
    if ( A[mid] <= A[mid+1]){
        low = mid+1;
        
    } 
    else {
        high = mid -1;
        
        
    }
    }
    int l= 0, h= low;
    
    while ( l<= h){
        int mid = (l+h)/2;
        if (A [mid]==B)
        return mid;
        else if(A[mid]<B)
        l = mid+1;
        else 
        h = mid+1;
    }
    return -1;
}


Que4:

int Solution::searchMatrix(vector<vector<int> > &A, int B) {
    int n = A.size(), m = A[0].size();
    int i = 0, j= m-1;
    while(i>=0 && i<n && j>=0 && j<m){
        if (A[i][j]==B)
        return 1;
        else if(A[i][j]<B)
        i++
        else if(A[i][j]<B)
        i++;
        else j--;
        
        
    }
    return 0;
    
}

