Que1 :

int Solution::findMedian(vector<vector<int> > &A) {
int mn= INT_MIN;

for (int i = 0; i<A.size();i++){
    mn = min(mn, A[i][0]);
    mx = max(mx, A[i] [A[0].size()-1]
    );
    
}
int find = (A.size()*A[0].size()+1)/2;
while(mn<mx){
    int mid= mn+(mx-mn)/2;
    
    int c=0;
    for(int i=0; i<A.size();i++)
    c= c+ upper_bound(A[i].begin(),A[i].begin()+A[0].size(),mid)-A[i].begin();
    if(c<find)
    
    mn = mid+1;
    else
    
    mx=mid
 }

return mn;

}

Que2:

int Solution::solve(vector<int> &A) {
int n= arr.size();
int low= 0;
int high = arr.size()-1;
while (low <= high)
{
    int mid = low + (high-low)/2;
    if((arr[mid]>=arr[mid-1]||mid==0)&&(mid==n-1||arr[mid]>=arr[mid+1]))return arr[mid];
    else{
        if(mid>0 && arr[mid-1]>arr[mid])high=mid-1;
        else low = mid+1;
    }
   
}
return -1;

}

Que3:

 int n = A.size();
    int l=0, r= n-1;
    
    int midPoint = -1;
    int minVal = 2e9;
    
    while(l<=r){
        int mid = (l+r)>> 1;
        if(A[mid]<minVal){
            midPoint = mid;
            minVal = A[mid];
        }
        r = mid-1;
        
    }
    l=0, r= midPoint-1;
    while(l<=r){
        int mid = (l+r)>>1;
        if(A[mid]==B )return mid;
        if(A[mid]<B) l = mid+1;
        else r = mid -1;
        
    }
    l = midPoint, r= n-1;
    while(l<=r){
        int mid = (l+r)>>1;
        if(A[mid]==B) return mid;
        if(A[mid]<B )l = mid+1;
        else r = mid -1;
    }
    return -1;
}

Que 4:

 int n = A.size(), m = A[0].size();
    int i = 0, j= m-1;
    while(i>=0 && i<n && j>=0 && j<m){
        if (A[i][j]==B)
        return 1;
        else if(A[i][j]<B)
        i++
        else if(A[i][j]<B)
        i++;
        else j--;
        
        
    }
    return 0;





